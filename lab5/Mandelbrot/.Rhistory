ggplot2(data=avg_results, aes(size, time))
ggplot(data=avg_results, aes(size, time))
ggplot(data=avg_results, aes(size, time, color=fun))
avg_results
ggplot(data=avg_results, aes(size, time, color=fun)) + geom_point() + geom_errorbar(aes(ymin=time-sd, ymax=time+sd), width=.1) + ylab("Czas w sekundach")
ggplot(data=avg_results, aes(size, time, color=fun)) + geom_point() + geom_errorbar(aes(ymin=time-sd, ymax=time+sd), width=.1) + ylab("Czas w milisekundach") +xlab("Rozmiar macierzy")
ggplot(data=avg_results, aes(size, time, colour=fun)) + geom_point() + geom_errorbar(aes(ymin=time-sd, ymax=time+sd), width=.1) + ylab("Czas w milisekundach") +xlab("Rozmiar macierzy")
ggplot(data=avg_results, aes(x=size, y=time, colour=fun)) + geom_point() + geom_errorbar(aes(ymin=time-sd, ymax=time+sd), width=.1) + ylab("Czas w milisekundach") +xlab("Rozmiar macierzy")
ggplot(data=avg_results, aes(x=size, y=time, colour=fun)) + geom_point() + geom_errorbar(aes(ymin=time-sd, ymax=time+sd), width=.1) + ylab("Czas w milisekundach") +xlab("Rozmiar macierzy") +geom_line()
ggplot(data=avg_results, aes(x=size, y=time, colour=fun)) + geom_point() + geom_errorbar(aes(ymin=time-sd, ymax=time+sd), width=.1) + ylab("Czas w milisekundach") +xlab("Rozmiar macierzy")
results = read.csv("results.csv", sep=";")
View(results)
View(results)
results = read.csv("results.csv", sep=";")
results = read.csv("results.csv", sep=";", header=TRUE)
avg_results=aggregate(time ~ size:fun, data=results, FUN=mean)
avg_results$sd = aggregate(time ~ size:fun, data=results, FUN=sd)$time
View(avg_results)
View(avg_results)
ggplot(data=avg_results, aes(x=size, y=time, colour=fun)) + geom_point() + geom_errorbar(aes(ymin=time-sd, ymax=time+sd), width=.1) + ylab("Czas w milisekundach") +xlab("Rozmiar macierzy")
results = read.csv("results.csv", sep=";", header=TRUE)
avg_results=aggregate(time ~ size:fun, data=results, FUN=mean)
avg_results$sd = aggregate(time ~ size:fun, data=results, FUN=sd)$time
ggplot(data=avg_results, aes(x=size, y=time, colour=fun)) + geom_point() + geom_errorbar(aes(ymin=time-sd, ymax=time+sd), width=.1) + ylab("Czas w milisekundach") +xlab("Rozmiar macierzy")
results = read.csv("results.csv", sep=";", header=TRUE)
avg_results=aggregate(time ~ size:fun, data=results, FUN=mean)
avg_results$sd = aggregate(time ~ size:fun, data=results, FUN=sd)$time
ggplot(data=avg_results, aes(x=size, y=time, colour=fun)) + geom_point() + geom_errorbar(aes(ymin=time-sd, ymax=time+sd), width=.1) + ylab("Czas w milisekundach") +xlab("Rozmiar macierzy")
results = read.csv("results.csv", sep=";", header=TRUE)
View(results)
View(results)
results = read.csv("results.csv", sep=";", header=TRUE)
avg_results=aggregate(time ~ size:fun, data=results, FUN=mean)
results = read.csv("results.csv", sep=";", header=TRUE)
avg_results=aggregate(time ~ size:fun, data=results, FUN=mean)
avg_results$sd = aggregate(time ~ size:fun, data=results, FUN=sd)$time
ggplot(data=avg_results, aes(x=size, y=time, colour=fun)) + geom_point() + geom_errorbar(aes(ymin=time-sd, ymax=time+sd), width=.1) + ylab("Czas w milisekundach") +xlab("Rozmiar macierzy")
fitb = lm(time~poly(size, 3, raw=TRUE), data=avg_results[avg_results$fun=="naive",])
View(fitb)
View(fitb)
fitn = lm(time~poly(size, 3, raw=TRUE), data=avg_results[avg_results$fun=="better",])
fitb
ggplot(avg_results[avg_results$fun=="better",], aes(size, time)) + geom_point()
points_appr = data.frame(x=seq(30,160, length.out=250))
points_appr$y = predict(fitn, points_appr)
View(avg_results)
View(avg_results)
points_appr$y = predict(fitn, points_appr)
points_appr$y = predict(fitn, points_appr)
x= c(1,2,3)
y=c(1,4,9)
mydata= data.frame(x,y)
fit =lm(y~poly(x,3, raw=TRUE), data=mydata)
fit
ggplot(mydata, aes(x,y)) + geom_point()
newdata = data.frame(x=seq(30,160, length.out=250))
newdata$y=predict(fit, newdata)
View(results)
newdata = data.frame(x=seq(50,1000, length.out=250))
fitn
newdata$y = predict(fitn, newdata)
newdata = data.frame(size=seq(50,1000, length.out=250))
newdata$y = predict(fitn, newdata)
last_plot()
ggplot(data=avg_results, aes(x=size, y=time, colour=fun)) + geom_point() + geom_errorbar(aes(ymin=time-sd, ymax=time+sd), width=.1) + ylab("Czas w milisekundach") +xlab("Rozmiar macierzy")
last_plot()
last_plot() + geom_line(data=newdata, aes(size, y))
last_plot() + geom_line(data=newdata, aes(size, time))
last_plot() + geom_line(data=newdata, aes(size, time))
last_plot() + geom_line(data=newdata, aes(size, time, colour=fun))
fitn
View(fitn)
View(fitn)
last_plot() + geom_line(data=newdata, aes(size, y))
last_plot() + geom_line(data=newdata, aes(x, y))
last_plot() + geom_line(data=newdata, aes(x, y))
ggplot(data=avg_results[avg_results$fun=="better",], aes(x=size, y=time)) + geom_point() + geom_errorbar(aes(ymin=time-sd, ymax=time+sd), width=.1) + ylab("Czas w milisekundach") +xlab("Rozmiar macierzy")
last_plot() + geom_line(data=newdata, aes(size, y))
ggplot(data=avg_results[avg_results$fun=="better", colour=red], aes(x=size, y=time)) + geom_point() + geom_errorbar(aes(ymin=time-sd, ymax=time+sd), width=.1) + ylab("Czas w milisekundach") +xlab("Rozmiar macierzy")
ggplot(data=avg_results[avg_results$fun=="better", colour=fun], aes(x=size, y=time)) + geom_point() + geom_errorbar(aes(ymin=time-sd, ymax=time+sd), width=.1) + ylab("Czas w milisekundach") +xlab("Rozmiar macierzy")
ggplot(data=avg_results[avg_results$fun=="better",] colour=fun, aes(x=size, y=time)) + geom_point() + geom_errorbar(aes(ymin=time-sd, ymax=time+sd), width=.1) + ylab("Czas w milisekundach") +xlab("Rozmiar macierzy")
ggplot(data=avg_results[avg_results$fun=="better",], colour=fun, aes(x=size, y=time)) + geom_point() + geom_errorbar(aes(ymin=time-sd, ymax=time+sd), width=.1) + ylab("Czas w milisekundach") +xlab("Rozmiar macierzy")
last_plot() + geom_line(data=newdata, aes(size, y))
last_plot() +ggplot(data=avg_results[avg_results$fun=="naive",], colour=fun, aes(x=size, y=time)) + geom_point() + geom_errorbar(aes(ymin=time-sd, ymax=time+sd), width=.1)
last_plot() +ggplot(data=avg_results[avg_results$fun=="naive",], colour=fun, aes(x=size, y=time))
ggplot(data=avg_results, aes(x=size, y=time, colour=fun)) + geom_point() + geom_errorbar(aes(ymin=time-sd, ymax=time+sd), width=.1) + ylab("Czas w milisekundach") +xlab("Rozmiar macierzy")
newdata
last_plot() + geom_line(data=newdata, aes(size, y, colour=fun))
newdata
newdata$fun = "naive"
newdata
newdata$y = predict(fitb, newdata)
newdata
newdata$y = predict(fitb, newdata) + predict(fitn, newdata )
newdata
newdata$y = predict(fitb, newdata)
newdata2=newdata
newdata
newdata$y = predict(fitn, newdata)
newdata
newdata2$y = predict(fitb, newdata)
newdata2$fun = better
newdata2$fun = "better"
newdata2
last_plot()
ggplot(data=avg_results, aes(x=size, y=time, colour=fun)) + geom_point() + geom_errorbar(aes(ymin=time-sd, ymax=time+sd), width=.1) + ylab("Czas w milisekundach") +xlab("Rozmiar macierzy")
last_plot()
total = rbind(newdata, newdata2)
total\
total
last_plot() + geom_line(data=total, eas(size, y))
last_plot() + geom_line(data=total, aes(size, y))
total = rbind(newdata2, newdata)
last_plot() + geom_line(data=total, aes(size, y))
last_plot() + geom_line(data=total, aes(size, y, colour=fun))
last_plot() + geom_line(data=total, aes(size, y, colour=fun))
last_plot() + geom_line(data=total, aes(size, y, colour=fun))
ggplot(data=avg_results, aes(x=size, y=time, colour=fun)) + geom_point() + geom_errorbar(aes(ymin=time-sd, ymax=time+sd), width=.1) + ylab("Czas w milisekundach") +xlab("Rozmiar macierzy")
library("ggplot2", lib.loc="~/R/win-library/3.5")
ggplot(data=avg_results, aes(x=size, y=time, colour=fun)) + geom_point() + geom_errorbar(aes(ymin=time-sd, ymax=time+sd), width=.1) + ylab("Czas w milisekundach") +xlab("Rozmiar macierzy")
last_plot() + geom_line(data=total, aes(size, y, colour=fun))
library("ggplot2", lib.loc="~/R/win-library/3.5")
setwd("C:/Users/paste/JuliaProjects/matrix_lab3")
results = read.csv("results.csv", sep=";", header=TRUE)
avg_results=aggregate(time ~ size:fun, data=results, FUN=mean)
avg_results$sd = aggregate(time ~ size:fun, data=results, FUN=sd)$time
fitb = lm(time~poly(size, 3, raw=TRUE), data=avg_results[avg_results$fun=="naive",])
fitn = lm(time~poly(size, 3, raw=TRUE), data=avg_results[avg_results$fun=="better",])
datanaive = data.frame(size=seq(50,1000, length.out=250))
datanaive$y = predict(fitn, datanaive)
databetter=datanaive
databetter$y = predict(fitb, databetter)
datanaive$fun = "naive"
databetter$fun = "better"
total = rbind(databetter, datanaive)
ggplot(data=avg_results, aes(x=size, y=time, colour=fun)) + geom_point() + geom_errorbar(aes(ymin=time-sd, ymax=time+sd), width=.1) + ylab("Czas w milisekundach") +xlab("Rozmiar macierzy")
last_plot() + geom_line(data=total, aes(size, y, colour=fun))
setwd("C:/Users/paste/JuliaProjects/matrix_lab3")
results = read.csv("results.csv", sep=";", header=TRUE)
avg_results=aggregate(time ~ size:fun, data=results, FUN=mean)
avg_results$sd = aggregate(time ~ size:fun, data=results, FUN=sd)$time
fitb = lm(time~poly(size, 3, raw=TRUE), data=avg_results[avg_results$fun=="naive",])
fitn = lm(time~poly(size, 3, raw=TRUE), data=avg_results[avg_results$fun=="better",])
datanaive = data.frame(size=seq(50,1000, length.out=250))
datanaive$y = predict(fitn, datanaive)
databetter=datanaive
databetter$y = predict(fitb, databetter)
datanaive$fun = "naive"
databetter$fun = "better"
total = rbind(databetter, datanaive)
ggplot(data=avg_results, aes(x=size, y=time, colour=fun)) + geom_point() + geom_errorbar(aes(ymin=time-sd, ymax=time+sd), width=.1) + ylab("Czas w milisekundach") +xlab("Rozmiar macierzy")
library("ggplot2", lib.loc="~/R/win-library/3.5")
setwd("C:/Users/paste/JuliaProjects/matrix_lab3")
results = read.csv("results.csv", sep=";", header=TRUE)
results = read.csv("results.csv", sep=";", header=TRUE)
setwd("C:/Users/paste/JuliaProjects/matrix_lab3")
avg_results=aggregate(time ~ size:fun, data=results, FUN=mean)
avg_results=aggregate(time ~ size:fun, data=results, FUN=mean)
avg_results=aggregate(time ~ size:fun, data=results, FUN=mean)
avg_results$sd = aggregate(time ~ size:fun, data=results, FUN=sd)$time
fitb = lm(time~poly(size, 3, raw=TRUE), data=avg_results[avg_results$fun=="naive",])
fitn = lm(time~poly(size, 3, raw=TRUE), data=avg_results[avg_results$fun=="better",])
datanaive = data.frame(size=seq(50,1000, length.out=250))
results = read.csv("results.csv", sep=";", header=TRUE)
results = read.csv("results.csv", sep=";", header=TRUE)
results = read.csv("results.csv", sep=";", header=TRUE)
results = read.csv("results.csv", sep=";", header=TRUE)
setwd("C:/Users/paste/JuliaProjects/matrix_lab3")
results = read.csv("results.csv", sep=";", header=TRUE)
avg_results=aggregate(time ~ size:fun, data=results, FUN=mean)
avg_results$sd = aggregate(time ~ size:fun, data=results, FUN=sd)$time
fitb = lm(time~poly(size, 3, raw=TRUE), data=avg_results[avg_results$fun=="naive",])
fitn = lm(time~poly(size, 3, raw=TRUE), data=avg_results[avg_results$fun=="better",])
datanaive = data.frame(size=seq(50,1000, length.out=250))
datanaive$y = predict(fitn, datanaive)
databetter=datanaive
databetter$y = predict(fitb, databetter)
datanaive$fun = "naive"
databetter$fun = "better"
total = rbind(databetter, datanaive)
ggplot(data=avg_results, aes(x=size, y=time, colour=fun)) + geom_point() + geom_errorbar(aes(ymin=time-sd, ymax=time+sd),
width=.1) + ylab("Czas w milisekundach") +xlab("Rozmiar macierzy")
last_plot() + geom_line(data=total, aes(size, y, colour=fun))
main.R
library("deSolve", lib.loc="~/R/win-library/3.5")
install.packages("deSolve")
library("deSolve", lib.loc="~/R/win-library/3.5")
main.R
lvpp <- function(pp.time,pp.init,pp.params) {
with (as.list(c(pp.time,pp.init,pp.params)), {
# Parameters
# N = prey population size; P = predator population size
# r = intrinsic growth rate of prey
# a = predation efficiency
# b = conversion efficiency of prey into predator
# d = intrinsic dseath rate of predator
# prey_k = carrying capacity for prey; only used if user-defined
# if no carrying capacity for prey, use this equation
if (pp.params["prey_k"] == -9999 ){
dNdt <- (r*N) - (a*N*P)
}
# else use the defined prey carrying capacity to compute the values.
else {
dNdt <- ((r*N)*(1-(N/prey_k))) - (a*N*P)
}
dPdt <- (b*a*N*P) - (d*P)
# return the vectors as a list
return(list(c(dNdt,dPdt)))
})
}
View(avg_results)
lvpp <- function(pp.time,pp.init,pp.params) {
with (as.list(c(pp.time,pp.init,pp.params)), {
# Parameters
# N = prey population size; P = predator population size
# r = intrinsic growth rate of prey
# a = predation efficiency
# b = conversion efficiency of prey into predator
# d = intrinsic dseath rate of predator
# prey_k = carrying capacity for prey; only used if user-defined
# if no carrying capacity for prey, use this equation
if (pp.params["prey_k"] == -9999 ){
dNdt <- (r*N) - (a*N*P)
}
# else use the defined prey carrying capacity to compute the values.
else {
dNdt <- ((r*N)*(1-(N/prey_k))) - (a*N*P)
}
dPdt <- (b*a*N*P) - (d*P)
# return the vectors as a list
return(list(c(dNdt,dPdt)))
})
}
pp.init<- c()
pp.params <- c()
shinyServer(
function(input, output) {
# Generate carrying capacity option if user selects 'set carrying capacity' option
output$UIpreyk <- renderUI({
if (input$Prey_K == 2){
numericInput("K",label=h6("Select a value for K (prey's carrying capacity)."),value=500,min=1)}
else {""}
})
# Global setup ----------
pp.params <- reactive({
input$goButton
isolate(c("r" = input$r, "a" = input$a, "d" = input$d, "b" = input$b, "prey_k" = ifelse(input$Prey_K == 2, input$K, -9999)))
})
pp.init <- reactive({
input$goButton
isolate(c("N" = input$N, "P" = input$P))
})
pp.time <- reactive({
input$goButton
isolate(seq(0,input$time,by=1))
})
param_text <- reactive({
pp.params <- pp.params()
pp.init <- pp.init()
paste("N = ", pp.init["N"], ", P = ", pp.init["P"], ", r = ", pp.params["r"], ", a = ", pp.params["a"], ", d = ", pp.params["d"], ", b = ", pp.params["b"], ", Prey K = ", ifelse(input$Prey_K == 2, pp.params["prey_k"], "None"), sep = "")
})
full_table<- reactive({
pp.time <- pp.time()
pp.params <- pp.params()
pp.init <- pp.init()
# Return the table!
floor(as.data.frame(ode(func=lvpp,y=pp.init,parms=pp.params,times=pp.time)))
})
# Render outputs -----------
# Table tab
output$table1 <- renderTable({
generated_df <- full_table()
generated_df
})
# Plots
ranges <- reactiveValues(x = NULL, y = NULL)
plot1 <- reactive({
pp.time <- pp.time()
pp.params <- pp.params()
pp.init <- pp.init()
lvout <- full_table()
# Begin plotting!
plot(lvout$P~lvout$N,ylim=c(0,max(lvout$P)*1.25),xlim=c(0,max(lvout$N)*1.25),type="l",lwd=1.5,
xlab="Prey population size",ylab="Predator population size", cex.lab = 1.25)
points(x=pp.init["N"],y=pp.init["P"],col="red",pch=18,cex=1.75)
abline(v=pp.params["d"]/(pp.params["b"]*pp.params["a"]))
if (pp.params["prey_k"] == -9999) {
abline(h=pp.params["r"]/pp.params["a"])
}
if (pp.params["prey_k"] != -9999) {
abline (b=-(pp.params["r"]/(pp.params["prey_k"]*pp.params["a"])), a = pp.params["r"]/pp.params["a"])
}
})
plot2 <- reactive({
pp.time <- pp.time()
pp.params <- pp.params()
pp.init <- pp.init()
lvout <- full_table()
plot(lvout$N~pp.time,type="l",xlab="pp.time",lwd=1.5,
ylab="Population Size",ylim=c(0,max(max(lvout$N),max(lvout$P))*1.25), cex.lab = 1.25)
points(lvout$P~pp.time,col="red",type="l",lwd=1.5)
legend(x="topright",col=c("black","red"),lty=1,legend=c("Prey","Predator"),bty="n",lwd=2)
mtext(side = 3, line = 0, text = "I'm interactive! Brush an area over me to change axes of bottom graph")
})
plot3 <- reactive({
pp.time <- pp.time()
pp.params <- pp.params()
pp.init <- pp.init()
lvout <- full_table()
plot(lvout$N~pp.time,type="l",xlab="pp.time",lwd=1.5,
ylab="Population Size",ylim=ranges$y, cex.lab = 1.25, xlim = ranges$x)
points(lvout$P~pp.time,col="red",type="l",lwd=1.5)
legend(x="topright",col=c("black","red"),lty=1,legend=c("Prey","Predator"),bty="n",lwd=2)
})
plot2print <- function() {
pp.time <- pp.time()
pp.params <- pp.params()
pp.init <- pp.init()
lvout <- full_table()
par(mfrow = c(1,2))
# Plot 1
plot(lvout$P~lvout$N,ylim=c(0,max(lvout$P)*1.25),xlim=c(0,max(lvout$N)*1.25),type="l",lwd=1.5,
xlab="Prey population size",ylab="Predator population size", cex.lab = 1.25)
points(x=pp.init["N"],y=pp.init["P"],col="red",pch=18,cex=1.75)
abline(v=pp.params["d"]/(pp.params["b"]*pp.params["a"]))
if (pp.params["prey_k"] == -9999) {
abline(h=pp.params["r"]/pp.params["a"])
}
if (pp.params["prey_k"] != -9999) {
abline (b=-(pp.params["r"]/(pp.params["prey_k"]*pp.params["a"])), a = pp.params["r"]/pp.params["a"])
}
# Plot 2
plot(lvout$N~pp.time,type="l",xlab="pp.time",lwd=1.5,
ylab="Population Size",ylim=c(0,max(max(lvout$N),max(lvout$P))*1.25), cex.lab = 1.25)
points(lvout$P~pp.time,col="red",type="l",lwd=1.5)
legend(x="topright",col=c("black","red"),lty=1,legend=c("Prey","Predator"),bty="n",lwd=2)
}
output$plot1<- renderPlot({plot1()})
output$plot2 <- renderPlot({plot2()})
output$plot3 <- renderPlot({plot3()})
observe({
brush <- input$plot2_brush
if (!is.null(brush)) {
ranges$x <- c(brush$xmin, brush$xmax)
ranges$y <- c(brush$ymin, brush$ymax)
} else {
ranges$x <- NULL
ranges$y <- NULL
}
})
output$downloadPlot <- downloadHandler(
filename =
function() {
paste('plot-', Sys.Date(), '.png', sep='')
},
content = function(filename) {
png(filename, height = 500, width = 750)
par(oma = c(2,0,0,0))
plot2print()
mtext(param_text(), side = 1, outer = TRUE)
dev.off()
}
)
}
)
install.packages("shiny")
install.packages(UsingR)
install.packages("UsingR")
library("UsingR", lib.loc="~/R/win-library/3.5")
install.packages("aplpack")
library("aplpack", lib.loc="~/R/win-library/3.5")
help(prop.test)
sample(c("niebieski", "żóllty"), 10, replace=TRUE)
help(prop.test)
help(chisq.test)
chisq.test(c(50,50,20), c(45,50,25))
chisq.test(x=c(50,50,20), p=c(45,50,25), correct=TRUE, B=120)
A=matrix(c(479,214,.......), nrow=3
A=matrix(c(479,214, 172), nrow=3
A=matrix(c(479,214, 172, 173, 47, 45, 119, 15, 85), nrow=3
A=matrix(c(479,214, 172, 173, 47, 45, 119, 15, 85), nrow=3)
A=matrix(c(479,214, 172, 173, 47, 45, 119, 15, 85), nrow=3)
A
install.packages("TeachingDemos")
library("TeachingDemos", lib.loc="~/R/win-library/3.5")
chisq.detail(A)
chisq.test(A)
R=matrix(c(50,50,20, 45,50,25), nrows=2)
R=matrix(c(50,50,20, 45,50,25), nrow=2)
R
R=matrix(c(50,50,20, 45,50,25), nrow=3)
chisq.test(R)
R
chisq.detail(A)
chisq.test(R)
sqrt()
sqrt(4)
sqrt(0.81871)
chisq.test(R, B=120)
chisq.test(A)
Lek=c(0.135,23)
Placebo=c(1.55, 1.15)
B=matrix(Lek, Placebo, nrow=2)
B
B=matrix(Lek=c(1,2), Placebo=c(1,23), nrow=2)
Lek=c(0.135,23)
Placebo=c(1.55, 1.15)
cbind(Lek, Placebo)
R=matrix(c(0.135, 1.55, 23, 1.15, 0.38, 0.27, 106, 0.64, 0.3, 0.125, 106.2, 105, 52.6, 25, 1.9, 0.8, 19.5, 0.8, 19.5, 3.9, 5.8, 1.2, 6.4, 0.145), nrow=2)
R
shapiro.test(log(R[1,]))
t.test(R, paired=FALSE)
t.test(R, paired=TRUE)
t.test(R[1,],R[2,] paired=TRUE)
t.test(R[1,],R[2,], paired=TRUE)
R[1,]="Lek"
R
R=matrix(c(0.135, 1.55, 23, 1.15, 0.38, 0.27, 106, 0.64, 0.3, 0.125, 106.2, 105, 52.6, 25, 1.9, 0.8, 19.5, 0.8, 19.5, 3.9, 5.8, 1.2, 6.4, 0.145), nrow=2)
R
dane = data.frame(R)
dane
t.test(R[1,],R[2,], paired=TRUE)
t.test(dane, paired=FALSE)
t.test(R[1,], log(R[2,]), paired=TRUE)
t.test(R[2,], log(R[1,]), paired=TRUE)
R[1,]
R[2,]
t.test(x=log(R[1,]), y=log(R[2,]), paired=FALSE)
t.test(x=log(R[1,]), y=log(R[2,]), paired=TRUE)
R
dane = dataframe(Temp=c(2289, 2132, 1988, 1830, 1489, 1286, 1178, 1075), Opor= c(61.97, 57.32, 52.70, 47.92, 37.72, 32.09, 28.97, 24.23
))
dane = data.frame(Temp=c(2289, 2132, 1988, 1830, 1489, 1286, 1178, 1075), Opor= c(61.97, 57.32, 52.70, 47.92, 37.72, 32.09, 28.97, 24.23
))
model = lm(Opor~Temp, data=done)
model = lm(Opor~Temp, data=dane)
summary(model)
plot(dane)
plot(dane$Temp, dane$Opor)
with(dane, plot(Opor~Temp))
abline(model)
summary(model)
przedz_ufn = predict(model, newdata=data.frame(Temp=1600), internal= "confidence", level=0.95)
przedz_ufn
przedz_ufn = predict(model, newdata=data.frame(Temp=1600), interval= "confidence", level=0.95)
przedz_ufn
Temp1= seq(1075, 2289, by=0.5)
plot()
plot(Temp1)
lines(Temp1, przedz_ufn[,2], col="orange")
przedz_ufn = predict(model, newdata=data.frame(Temp=Temp1), interval= "confidence", level=0.95)
plot(Temp1)
lines(Temp1, przedz_ufn[,2], col="orange")
lines(Temp1, przedz_ufn[,3], col="blue")
przedz_ufn = predict(model, newdata=data.frame(Temp=Temp1), interval= "confidence", level=0.95)
przedz_ufn
Temp1= seq(1075, 2289, by=0.5)
plot(Temp1)
lines(Temp1, przedz_ufn[,2], col="orange")
lines(Temp1, przedz_ufn[,3], col="blue")
Temp1= seq(1075, 2289, by=0.5)
przedz_ufn = predict(model, newdata=data.frame(Temp=Temp1), interval= "confidence", level=0.95)
lines(Temp1, przedz_ufn[,2], col="orange")
lines(Temp1, przedz_ufn[,3], col="blue")
plot(Temp1)
przedz_ufn = predict(model, newdata=data.frame(Temp=Temp1), interval= "confidence", level=0.999999)
plot(Temp1)
lines(Temp1, przedz_ufn[,2], col="orange")
lines(Temp1, przedz_ufn[,3], col="blue")
R[1,]="Lek"
Temp1= seq(1075, 2289, by=0.5)
przedz_ufn = predict(model, newdata=data.frame(Temp=Temp1), interval= "confidence", level=0.999999)
lines(Temp1, przedz_ufn[,2], col="orange")
lines(Temp1, przedz_ufn[,3], col="blue")
plot(Temp1)
przedz_ufn = predict(model, newdata=data.frame(Temp=seq(1075, 2289, by=0.5)), interval= "confidence", level=0.99999)
with(dane, plot(Opor~Temp))
abline(model)
przedz_ufn = predict(model, newdata=data.frame(Temp=seq(1075, 2289, by=0.5)), interval= "confidence", level=0.99999)
plot(Temp1)
lines(Temp1, przedz_ufn[,2], col="orange")
przedz_ufn = predict(model, newdata=data.frame(Temp=seq(1075, 2289, by=0.5)), interval= "confidence", level=0.99999)
przedz_ufn = predict(model, newdata=data.frame(Temp=seq(1075, 2289, by=0.5)), interval= "confidence", level=0.99999)
plot(Temp1)
lines(Temp1, przedz_ufn[,2], col="orange")
View(results)
View(results)
setwd("C:/Users/paste/IdeaProjects/Teoriawspolbieznosci/lab5/Mandelbrot")
results = read.csv("results.csv")
avg_results = aggregate(time ~ threadsNo:tasksNo, data=results, FUN=mean)
avg_results$sd = aggregate(time ~ threadsNo:tasksNo, data=results, FUN=sd)$time
library("ggplot2")
ggplot(data=avg_results, aes(x=tasksNo, y=time, color=as.factor(threadsNo))) +
geom_point() +
#geom_errorbar(aes(ymin=time-sd, ymax=time+sd), width=.1) +
ylab("Czas wykonania [ms]") +
xlab("Liczba zadań") +
labs(color='Liczba wątków w pool') +
scale_color_manual(breaks = c("1", "4", "8"), values=c("red", "blue", "green"))
setwd("C:/Users/paste/IdeaProjects/Teoriawspolbieznosci/lab5/Mandelbrot")
results = read.csv("results.csv")
avg_results = aggregate(time ~ threadsNo:tasksNo, data=results, FUN=mean)
avg_results$sd = aggregate(time ~ threadsNo:tasksNo, data=results, FUN=sd)$time
library("ggplot2")
ggplot(data=avg_results, aes(x=tasksNo, y=time, color=as.factor(threadsNo))) +
geom_point() +
#geom_errorbar(aes(ymin=time-sd, ymax=time+sd), width=.1) +
ylab("Czas wykonania [ms]") +
xlab("Liczba zadań") +
labs(color='Liczba wątków w pool') +
scale_color_manual(breaks = c("1", "4", "8"), values=c("red", "blue", "green"))
View(avg_results)
